name: Build

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build:
    name: Build jupytercad
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Conda environment with Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: cad
          create-args: >-
            python=3.9
            jupyterlab=4
            yarn=3

      - name: Setup pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-3.9-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.9-
            pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Setup yarn cache
        uses: actions/cache@v4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Setup OpenCascade build cache
        uses: actions/cache@v4
        with:
          path: |
            packages/opencascade/lib/jupytercad.opencascade.js
            packages/opencascade/lib/jupytercad.opencascade.wasm
            packages/opencascade/lib/jupytercad.opencascade.d.ts
            packages/opencascade/lib/jupytercad.opencascade.version
          key: ${{ hashFiles('packages/opencascade/build.yml') }}

      - name: Build the extension
        shell: bash -l {0}
        run: |
          set -eux
          yarn install
          yarn dev
          jupyter labextension list 2>&1 | grep -ie "jupytercad-core.*OK"
          jupyter labextension list 2>&1 | grep -ie "jupytercad-lab.*OK"

      - name: Test import
        shell: bash -l {0}
        run: python -c "import jupytercad_app"

      - name: Package the extension
        shell: bash -l {0}
        run: |
          set -eux
          pip install hatch
          yarn build:packages

      - name: Upload extension packages
        uses: actions/upload-artifact@v4
        with:
          name: extension-artifacts
          path: |
            python/jupytercad_core/dist/jupytercad*
            python/jupytercad_lab/dist/jupytercad*
            python/jupytercad_app/dist/jupytercad*
            python/jupytercad/dist/jupytercad*
            python/jupytercad_lite/dist/jupytercad*
          if-no-files-found: error

  test_isolated:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          architecture: 'x64'

      - uses: actions/download-artifact@v4
        with:
          name: extension-artifacts

      - name: Install and Test
        # TODO Update JupyterLab version
        run: |
          set -eux
          # Remove NodeJS, twice to take care of system and locally installed node versions.
          sudo rm -rf $(which node)
          sudo rm -rf $(which node)

          cp ./jupytercad_core/dist/jupytercad*.whl ./jupytercad_lab/dist/jupytercad*.whl ./jupytercad_app/dist/jupytercad*.whl .
          python -m pip install "jupyterlab>=4.0.0" jupytercad*.whl

          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "jupytercad.*OK"
          jupyter cad --version
          python -m jupyterlab.browser_check --no-chrome-test

  integration-tests:
    name: Integration tests
    needs: build
    runs-on: ubuntu-latest

    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Conda environment with Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: '1.5.5-0'
          environment-name: cad
          create-args: >-
            python=3.9
            jupyterlab
            pythonocc-core=7.7.0

      - name: Download extension package
        uses: actions/download-artifact@v4
        with:
          name: extension-artifacts

      - name: Install the extension
        shell: bash -l {0}
        run: |
          set -eux
          cp ./jupytercad_core/dist/jupytercad*.whl ./jupytercad_lab/dist/jupytercad*.whl ./jupytercad_app/dist/jupytercad*.whl ./jupytercad/dist/jupytercad*.whl .
          python -m pip install jupytercad*.whl

      - name: Install
        shell: bash -l {0}
        working-directory: ui-tests
        run: |
          jlpm install
          yarn playwright install chromium

      - name: Execute integration tests
        shell: bash -l {0}
        working-directory: ui-tests
        run: jlpm run test

      - name: Upload Playwright Test report
        id: upload-galata-artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jupytercad-playwright-tests
          path: |
            ui-tests/test-results
            ui-tests/playwright-report

      - name: Save artifact data
        if: always()
        uses: trungleduc/appsharingspace-pr-comment/.github/actions/save-artifact-link@v2
        with:
          output_name: galata-apss
          artifact_link: 'https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}/artifacts/${{ steps.upload-galata-artifact.outputs.artifact-id }}'

  check_links:
    name: Check Links
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/check-links@v1

  build-lite:
    name: Build JupyterLite
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Conda environment with Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: '1.5.5-0'
          environment-name: build-env
          create-args: >-
            python=3.10
            pip
            jupyterlite-core
            jupyterlite-xeus
            jupyter_server

      - name: Download extension package
        uses: actions/download-artifact@v4
        with:
          name: extension-artifacts

      - name: Install the extension
        shell: bash -l {0}
        run: |
          set -eux
          cp ./jupytercad_core/dist/jupytercad*.whl jupytercad_core-0.0.1-py3-none-any.whl
          cp ./jupytercad_lab/dist/jupytercad*.whl jupytercad_lab-0.0.1-py3-none-any.whl
          cp ./jupytercad_app/dist/jupytercad*.whl jupytercad_app-0.0.1-py3-none-any.whl
          cp ./jupytercad_lite/dist/jupytercad*.whl jupytercad_lite-0.0.1-py3-none-any.whl

      - name: Build the lite site
        shell: bash -l {0}
        working-directory: lite
        run: |
          set -eux
          mkdir -p content && cp ../examples/*.jcad ../examples/*.STEP ../examples/*.stl ../examples/Notebook.ipynb ../examples/jcad.ipynb ./content
          jupyter lite build --contents content --output-dir dist

      - name: Upload github-pages artifact
        id: upload-jupyterlite-artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./lite/dist
          retention-days: 30

      - name: Upload lite artifact
        id: upload-lite-artifact
        uses: actions/upload-artifact@v4
        with:
          name: lite-artifacts
          path: ./lite/dist

      - name: Save artifact data
        uses: trungleduc/appsharingspace-pr-comment/.github/actions/save-artifact-link@v2
        with:
          artifact_link: 'https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}/artifacts/${{ steps.upload-jupyterlite-artifact.outputs.artifact_id }}'

  deploy:
    needs: [integration-tests, build-lite]
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  integration-tests-lite:
    name: Integration tests Lite
    needs: build-lite
    runs-on: ubuntu-latest

    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Conda environment with Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: '1.5.5-0'
          environment-name: cad
          create-args: >-
            python=3.9
            jupyterlab

      - name: Download extension package
        uses: actions/download-artifact@v4
        with:
          name: lite-artifacts
          path: dist

      - name: Install dependencies
        shell: bash -l {0}
        working-directory: ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install

      - name: Set up browser cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}

      - name: Install browser
        shell: bash -l {0}
        run: npx playwright install chromium
        working-directory: ui-tests

      - name: Execute integration tests
        shell: bash -l {0}
        working-directory: ui-tests
        run: jlpm run test:lite

      - name: Upload Playwright Test report
        id: upload-galata-artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jupytercad-lite-playwright-tests
          path: |
            ui-tests/test-results
            ui-tests/playwright-report
